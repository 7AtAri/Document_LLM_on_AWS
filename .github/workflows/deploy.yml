name: Build and Deploy Docker to ECR on Push

on:
  push:
    branches: [main]  # if push should go to main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: clone the repository code to the runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: config for github actions to interact with AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: 
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      # Step 4: 
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
      
      - name: Get the image digest of the latest image in ECR
        id: get_digest
        run: |
          latest_image_digest=$(aws ecr describe-images \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --query 'imageDetails[?imageTags[0]==`latest`].imageDigest' \
            --output text)
            
            if [ "$latest_image_digest" == "None" ]; then
              echo "No previous image found in ECR."
              latest_image_digest=""
            fi
            echo "latest_image_digest=${latest_image_digest}" >> $GITHUB_ENV
  
      - name: Get the image digest of the newly built image
        id: get_new_image_digest
        run: |
          # Get the digest of the newly built Docker image
          new_image_digest=$(docker images --digests ${{ secrets.ECR_REPOSITORY }}:latest --format "{{.Digest}}")
          
          # Save the digest to environment variable
          echo "new_image_digest=${new_image_digest}" >> $GITHUB_ENV

      - name: Compare digests and decide if push is needed
        id: compare_digests
        run: |
          # Compare the digests of the current image in ECR and the new locally built image
          if [ "$latest_image_digest" != "$new_image_digest" ]; then
            echo "Image has changed. Pushing new image."
            echo "push_image=true" >> $GITHUB_ENV
          else
            echo "No change in image. Skipping push."
            echo "push_image=false" >> $GITHUB_ENV
          
          # Set output for later use
          echo "::set-output name=push_image::$(echo $push_image)"

      - name: Push Docker image to ECR if changed
        if: steps.compare_digests.outputs.push_image == 'true'
        run: |
          # Tag and push the Docker image to ECR if it has changed
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
        
      # Step 6: 
      - name: Tag and Push Docker image to ECR
        if: env.push_image == 'true'
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
  
      # Step 7: Register new ECS task definition revision
        # - retrieve the current task definition from ECS using the ECS CLI
        # - update task definition with the new docker image URL
        # - create new task definition JSON file with updated values
        # - register the new task definition with ECS
      - name: Register new ECS task definition revision
        run: |
          task_definition=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }})
            
          new_task_definition=$(echo $task_definition | jq '.taskDefinition | .containerDefinitions[0].image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest"')
            
          echo $new_task_definition | jq '{ family: .family, containerDefinitions: .containerDefinitions }' > updated-task-definition.json
  
          new_task_definition_revision=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.revision' --output text)
          
      # Step 8: 
      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }}:$new_task_definition_revision